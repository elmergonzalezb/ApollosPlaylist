{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/add-to-playlist-modal/AddToPlaylistModal.jsx\";\nimport React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert2';\nimport autoBind from 'react-autobind';\nimport SongRow from '../../common/components/SongRow';\nimport Loading from '../../common/components/Loading';\nimport { getUserEditablePlaylists, addTracksToPlaylist } from '../../common/apiUtils';\nimport PlaylistModalRow from './subcomponents/PlaylistModalRow';\nimport { deepCamelCaseKeys } from '../../common/constants';\n\nclass AddToPlaylistModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editablePlaylists: []\n    };\n    autoBind(this);\n  }\n\n  handleAddToPlaylist(playlistId) {\n    let _this$props = this.props,\n        currentUser = _this$props.currentUser,\n        song = _this$props.song;\n    return () => {\n      addTracksToPlaylist(currentUser.id, playlistId, [song.id]);\n      swal.fire('Success', 'The song was added to the playlist.', 'success');\n      this.props.onClose();\n    };\n  }\n\n  componentWillMount() {\n    getUserEditablePlaylists().then(response => {\n      this.setState({\n        editablePlaylists: deepCamelCaseKeys(response.data)\n      });\n    });\n  }\n\n  render() {\n    let _this$props2 = this.props,\n        isOpen = _this$props2.isOpen,\n        song = _this$props2.song,\n        onClose = _this$props2.onClose;\n    let editablePlaylists = this.state.editablePlaylists;\n\n    if (!isOpen || !song) {\n      return null;\n    }\n\n    return React.createElement(Modal, {\n      centered: true,\n      show: true,\n      onHide: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Add to playlist\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-2 w-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(SongRow, {\n      song: song,\n      showLinks: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(\"hr\", {\n      style: {\n        width: '95%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        maxHeight: '40vh',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, editablePlaylists.length === 0 ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }) : editablePlaylists.map((playlist, index) => {\n      return React.createElement(\"div\", {\n        key: \"playlist-modal-row-\".concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(PlaylistModalRow, {\n        playlist: playlist,\n        index: index,\n        handleAddToPlaylist: this.handleAddToPlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        style: {\n          width: '95%'\n        },\n        className: \"m-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }));\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddToPlaylistModal);","map":{"version":3,"sources":["/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/add-to-playlist-modal/AddToPlaylistModal.jsx"],"names":["React","Component","Modal","connect","swal","autoBind","SongRow","Loading","getUserEditablePlaylists","addTracksToPlaylist","PlaylistModalRow","deepCamelCaseKeys","AddToPlaylistModal","constructor","props","state","editablePlaylists","handleAddToPlaylist","playlistId","currentUser","song","id","fire","onClose","componentWillMount","then","response","setState","data","render","isOpen","width","maxHeight","overflow","length","map","playlist","index","mapStateToProps","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert2';\nimport autoBind from 'react-autobind';\nimport SongRow from '../../common/components/SongRow';\nimport Loading from '../../common/components/Loading';\nimport { getUserEditablePlaylists, addTracksToPlaylist } from '../../common/apiUtils';\nimport PlaylistModalRow from './subcomponents/PlaylistModalRow';\nimport { deepCamelCaseKeys } from '../../common/constants';\n\nclass AddToPlaylistModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editablePlaylists: [],\n    };\n\n    autoBind(this);\n  }\n\n  handleAddToPlaylist(playlistId) {\n    let { currentUser, song } = this.props;\n\n    return () => {\n      addTracksToPlaylist(currentUser.id, playlistId, [song.id]);\n      swal.fire('Success', 'The song was added to the playlist.', 'success');\n      this.props.onClose();\n    };\n  }\n\n  componentWillMount() {\n    getUserEditablePlaylists().then(response => {\n      this.setState({\n        editablePlaylists: deepCamelCaseKeys(response.data),\n      });\n    });\n  }\n\n  render() {\n    let { isOpen, song, onClose } = this.props;\n    let { editablePlaylists } = this.state;\n\n    if (!isOpen || !song) {\n      return null;\n    }\n\n    return (\n      <Modal centered show={true} onHide={onClose}>\n        <Modal.Header closeButton>\n          <h5 className=\"m-0\">Add to playlist</h5>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"p-2 w-100\">\n            <SongRow song={song} showLinks={false} />\n          </div>\n          <hr style={{ width: '95%' }} />\n          <div style={{ maxHeight: '40vh', overflow: 'auto' }}>\n            {editablePlaylists.length === 0 ? (\n              <Loading />\n            ) : (\n              editablePlaylists.map((playlist, index) => {\n                return (\n                  <div key={`playlist-modal-row-${index}`}>\n                    <PlaylistModalRow\n                      playlist={playlist}\n                      index={index}\n                      handleAddToPlaylist={this.handleAddToPlaylist}\n                    />\n                    <hr style={{ width: '95%' }} className=\"m-2\" />\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.user,\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AddToPlaylistModal);\n"]},"metadata":{},"sourceType":"module"}