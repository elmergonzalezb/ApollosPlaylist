{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/user-top-tracks/subcomponents/Track.jsx\";\nimport React, { Component } from 'react';\nimport { Image } from 'react-bootstrap';\nimport '../user-top-tracks.css';\nimport { Link } from 'react-router-dom';\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playing: false\n    };\n  } // [TODO] -- pause previous song when some other song is played\n  // currently it overlaps the previous song\n\n\n  handleTrackPlayback(trackPreviewURL) {\n    let playing = this.state.playing;\n\n    if (playing) {\n      this.player.pause();\n      this.setState({\n        playing: false\n      });\n    } else {\n      this.player.src = trackPreviewURL;\n      this.player.play();\n      this.setState({\n        playing: true\n      });\n    }\n  }\n\n  renderTrack() {\n    let _this$props = this.props,\n        trackName = _this$props.trackName,\n        trackArtists = _this$props.trackArtists,\n        trackImage = _this$props.trackImage,\n        trackPreviewURL = _this$props.trackPreviewURL;\n    let playing = this.state.playing;\n    return React.createElement(\"div\", {\n      className: \"track-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"track-info-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"track-image-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"track-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Image, {\n      id: \"track-image\",\n      src: trackImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"player-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: () => this.handleTrackPlayback(trackPreviewURL),\n      id: \"play-pause\",\n      class: playing ? 'pause' : 'play',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Play\"), React.createElement(\"audio\", {\n      ref: ref => this.player = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })))), React.createElement(Link, {\n      to: \"user/123/track/123\",\n      style: {\n        textDecoration: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"track-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"track-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, trackName), React.createElement(\"div\", {\n      id: \"track-artist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, trackArtists))), React.createElement(\"div\", {\n      className: \"mixer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Image, {\n      id: \"mixer-icon\",\n      src: \"https://www.embecosm.com/app/uploads/icon-machine.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.renderTrack();\n  }\n\n}\n\nexport default Track;","map":{"version":3,"sources":["/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/user-top-tracks/subcomponents/Track.jsx"],"names":["React","Component","Image","Link","Track","constructor","props","state","playing","handleTrackPlayback","trackPreviewURL","player","pause","setState","src","play","renderTrack","trackName","trackArtists","trackImage","ref","textDecoration","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Image } from 'react-bootstrap';\nimport '../user-top-tracks.css';\nimport { Link } from 'react-router-dom';\n\nclass Track extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n    };\n  }\n\n  // [TODO] -- pause previous song when some other song is played\n  // currently it overlaps the previous song\n  handleTrackPlayback(trackPreviewURL) {\n    let { playing } = this.state;\n\n    if (playing) {\n      this.player.pause();\n      this.setState({ playing: false });\n    } else {\n      this.player.src = trackPreviewURL;\n      this.player.play();\n      this.setState({ playing: true });\n    }\n  }\n\n  renderTrack() {\n    let { trackName, trackArtists, trackImage, trackPreviewURL } = this.props;\n    let { playing } = this.state;\n\n    return (\n      <div className=\"track-item\">\n        <div className=\"track-info-container\">\n          <div className=\"track-image-container\">\n            <div className=\"track-image\">\n              <Image id=\"track-image\" src={trackImage} />\n            </div>\n            <div id=\"player-container\">\n              <div\n                onClick={() => this.handleTrackPlayback(trackPreviewURL)}\n                id=\"play-pause\"\n                class={playing ? 'pause' : 'play'}\n              >\n                Play\n              </div>\n              <audio ref={ref => (this.player = ref)} />\n            </div>\n          </div>\n        </div>\n        <Link to={`user/123/track/123`} style={{ textDecoration: 'none' }}>\n          <div className=\"track-info\">\n            <div id=\"track-title\">{trackName}</div>\n            <div id=\"track-artist\">{trackArtists}</div>\n          </div>\n        </Link>\n\n        <div className=\"mixer\">\n          <Image id=\"mixer-icon\" src=\"https://www.embecosm.com/app/uploads/icon-machine.png\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return this.renderTrack();\n  }\n}\n\nexport default Track;\n"]},"metadata":{},"sourceType":"module"}