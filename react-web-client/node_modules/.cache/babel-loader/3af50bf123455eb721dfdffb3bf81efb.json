{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/playlists-grid/PlaylistsGrid.jsx\";\nimport React, { Component } from 'react';\nimport './playlists.css';\nimport PlaylistCard from './subcomponents/PlaylistCard';\nimport autoBind from 'react-autobind';\nimport Loading from '../../common/components/Loading';\nimport Paginator from '../../common/components/Paginator';\nimport { Modal, Button } from 'react-bootstrap';\nimport { userPlaylistUnfollow } from '../../common/apiUtils';\nimport ErrorView from '../../common/components/ErrorView';\n\nclass PlaylistsGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pageNumber: 0,\n      showUnfollowModal: false,\n      unfollowPlaylistId: null,\n      userId: null\n    };\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    let loadPlaylistData = this.props.loadPlaylistData;\n    let pageNumber = this.state.pageNumber;\n    loadPlaylistData(pageNumber);\n  }\n\n  handlePageClick(pageNumber) {\n    let _this$props = this.props,\n        loadPlaylistData = _this$props.loadPlaylistData,\n        playlists = _this$props.playlists;\n    return () => {\n      this.setState({\n        pageNumber\n      });\n\n      if (!playlists.items[pageNumber]) {\n        loadPlaylistData(pageNumber);\n      }\n    };\n  }\n\n  handlePreviousClick() {\n    let pageNumber = this.state.pageNumber;\n    let _this$props2 = this.props,\n        loadPlaylistData = _this$props2.loadPlaylistData,\n        playlists = _this$props2.playlists;\n    this.setState({\n      pageNumber: pageNumber - 1\n    });\n\n    if (!playlists.items[pageNumber - 1]) {\n      loadPlaylistData(pageNumber - 1);\n    }\n  }\n\n  handleNextClick() {\n    let pageNumber = this.state.pageNumber;\n    let _this$props3 = this.props,\n        loadPlaylistData = _this$props3.loadPlaylistData,\n        playlists = _this$props3.playlists;\n    this.setState({\n      pageNumber: pageNumber + 1\n    });\n\n    if (!playlists.items[pageNumber + 1]) {\n      loadPlaylistData(pageNumber + 1);\n    }\n  }\n\n  handleUnfollow(playlistId, userId) {\n    return e => {\n      this.setState({\n        showUnfollowModal: true,\n        unfollowPlaylistId: playlistId,\n        userId\n      });\n    };\n  }\n\n  handleCloseModal() {\n    this.setState({\n      showUnfollowModal: false\n    });\n  }\n\n  unfollowPlaylistHandler() {\n    let _this$state = this.state,\n        userId = _this$state.userId,\n        unfollowPlaylistId = _this$state.unfollowPlaylistId;\n    userPlaylistUnfollow(userId, unfollowPlaylistId).then(() => {\n      this.handleCloseModal();\n      window.location.reload();\n    });\n  }\n\n  renderUnfollowModal() {\n    return React.createElement(Modal, {\n      show: this.state.showUnfollowModal,\n      onHide: this.handleCloseModal,\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Are you sure you want to unfollow this playlist?\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"By unfollowing this playlist you will no longer see it under your playlists\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Button, {\n      size: \"md\",\n      variant: \"outline-primary\",\n      className: \"ml-1\",\n      onClick: this.handleCloseModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Close\"), React.createElement(Button, {\n      size: \"md\",\n      variant: \"outline-danger\",\n      className: \"ml-1\",\n      onClick: this.unfollowPlaylistHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Unfollow\")));\n  }\n\n  render() {\n    let playlists = this.props.playlists;\n    let pageNumber = this.state.pageNumber;\n\n    if (playlists.loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n\n    if (playlists.status) {\n      return React.createElement(ErrorView, {\n        status: playlists.status,\n        errorMessage: playlists.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      id: \"playlists-grid\",\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.renderUnfollowModal(), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, playlists.items[pageNumber].map((playlist, index) => {\n      return React.createElement(PlaylistCard, {\n        playlist: playlist,\n        key: index,\n        index: index,\n        handleUnfollow: this.handleUnfollow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row justify-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, Math.ceil(playlists.total / 12) > 1 && React.createElement(Paginator, {\n      numberOfPages: Math.ceil(playlists.total / 12),\n      currentPage: pageNumber,\n      handlePageClick: this.handlePageClick,\n      handleNext: this.handleNextClick,\n      handlePrevious: this.handlePreviousClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default PlaylistsGrid;","map":{"version":3,"sources":["/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/playlists-grid/PlaylistsGrid.jsx"],"names":["React","Component","PlaylistCard","autoBind","Loading","Paginator","Modal","Button","userPlaylistUnfollow","ErrorView","PlaylistsGrid","constructor","props","state","pageNumber","showUnfollowModal","unfollowPlaylistId","userId","componentDidMount","loadPlaylistData","handlePageClick","playlists","setState","items","handlePreviousClick","handleNextClick","handleUnfollow","playlistId","e","handleCloseModal","unfollowPlaylistHandler","then","window","location","reload","renderUnfollowModal","render","loading","status","errorMessage","map","playlist","index","Math","ceil","total"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './playlists.css';\nimport PlaylistCard from './subcomponents/PlaylistCard';\nimport autoBind from 'react-autobind';\nimport Loading from '../../common/components/Loading';\nimport Paginator from '../../common/components/Paginator';\nimport { Modal, Button } from 'react-bootstrap';\nimport { userPlaylistUnfollow } from '../../common/apiUtils';\nimport ErrorView from '../../common/components/ErrorView';\n\nclass PlaylistsGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pageNumber: 0,\n      showUnfollowModal: false,\n      unfollowPlaylistId: null,\n      userId: null,\n    };\n\n    autoBind(this);\n  }\n\n  componentDidMount() {\n    let { loadPlaylistData } = this.props;\n    let { pageNumber } = this.state;\n\n    loadPlaylistData(pageNumber);\n  }\n\n  handlePageClick(pageNumber) {\n    let { loadPlaylistData, playlists } = this.props;\n    return () => {\n      this.setState({ pageNumber });\n\n      if (!playlists.items[pageNumber]) {\n        loadPlaylistData(pageNumber);\n      }\n    };\n  }\n\n  handlePreviousClick() {\n    let { pageNumber } = this.state;\n    let { loadPlaylistData, playlists } = this.props;\n\n    this.setState({ pageNumber: pageNumber - 1 });\n    if (!playlists.items[pageNumber - 1]) {\n      loadPlaylistData(pageNumber - 1);\n    }\n  }\n\n  handleNextClick() {\n    let { pageNumber } = this.state;\n    let { loadPlaylistData, playlists } = this.props;\n\n    this.setState({ pageNumber: pageNumber + 1 });\n    if (!playlists.items[pageNumber + 1]) {\n      loadPlaylistData(pageNumber + 1);\n    }\n  }\n\n  handleUnfollow(playlistId, userId) {\n    return e => {\n      this.setState({\n        showUnfollowModal: true,\n        unfollowPlaylistId: playlistId,\n        userId,\n      });\n    };\n  }\n\n  handleCloseModal() {\n    this.setState({\n      showUnfollowModal: false,\n    });\n  }\n\n  unfollowPlaylistHandler() {\n    let { userId, unfollowPlaylistId } = this.state;\n    userPlaylistUnfollow(userId, unfollowPlaylistId).then(() => {\n      this.handleCloseModal();\n      window.location.reload();\n    });\n  }\n\n  renderUnfollowModal() {\n    return (\n      <Modal show={this.state.showUnfollowModal} onHide={this.handleCloseModal} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Are you sure you want to unfollow this playlist?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>By unfollowing this playlist you will no longer see it under your playlists</Modal.Body>\n        <Modal.Footer>\n          <Button size=\"md\" variant=\"outline-primary\" className=\"ml-1\" onClick={this.handleCloseModal}>\n            Close\n          </Button>\n          <Button size=\"md\" variant=\"outline-danger\" className=\"ml-1\" onClick={this.unfollowPlaylistHandler}>\n            Unfollow\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  render() {\n    let { playlists } = this.props;\n    let { pageNumber } = this.state;\n\n    if (playlists.loading) {\n      return <Loading />;\n    }\n\n    if (playlists.status) {\n      return <ErrorView status={playlists.status} errorMessage={playlists.errorMessage} />;\n    }\n\n    return (\n      <div id=\"playlists-grid\" className=\"\">\n        {this.renderUnfollowModal()}\n        <div className=\"row\">\n          {playlists.items[pageNumber].map((playlist, index) => {\n            return <PlaylistCard playlist={playlist} key={index} index={index} handleUnfollow={this.handleUnfollow} />;\n          })}\n        </div>\n        <br />\n        <div className=\"row justify-center\">\n          {Math.ceil(playlists.total / 12) > 1 && (\n            <Paginator\n              numberOfPages={Math.ceil(playlists.total / 12)}\n              currentPage={pageNumber}\n              handlePageClick={this.handlePageClick}\n              handleNext={this.handleNextClick}\n              handlePrevious={this.handlePreviousClick}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistsGrid;\n"]},"metadata":{},"sourceType":"module"}