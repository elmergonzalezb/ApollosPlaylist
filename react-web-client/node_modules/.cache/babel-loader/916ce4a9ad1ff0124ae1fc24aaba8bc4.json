{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/playlist-details/PlaylistDetails.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Image } from 'react-bootstrap';\nimport autoBind from 'react-autobind';\nimport { getDetailedPlaylistData } from '../../common/apiUtils';\nimport SongTable from './subcomponents/SongTable';\nimport Loading from '../../common/components/Loading';\nimport { Link } from 'react-router-dom';\nimport PlaylistStatistics from './subcomponents/PlaylistStatistics';\nimport AddToPlaylistModal from '../add-to-playlist-modal/AddToPlaylistModal';\nimport { deepCamelCaseKeys } from '../../common/constants';\nimport ErrorView from '../../common/components/ErrorView';\n\nclass PlaylistDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playlist: null,\n      selectedSong: null,\n      editPlaylistModalOpen: false,\n      errorStatus: null,\n      errorMessage: null\n    };\n    autoBind(this);\n  }\n\n  handleSelectTrack(index) {\n    return () => {\n      this.setState({\n        selectedSong: this.state.playlist.tracks[index],\n        editPlaylistModalOpen: true\n      });\n    };\n  }\n\n  handleCloseEditPlaylistModal() {\n    this.setState({\n      editPlaylistModalOpen: false\n    });\n  }\n\n  componentDidMount() {\n    let splitURL = window.location.hash.split('/');\n    let userId = splitURL[2];\n    let playlistId = splitURL[4]; // Get the detailes playlist data.\n\n    getDetailedPlaylistData(playlistId, userId).then(response => {\n      this.setState({\n        playlist: deepCamelCaseKeys(response.data),\n        loading: false\n      });\n    }).catch(error => {\n      this.setState({\n        errorStatus: error.request.status,\n        errorMessage: JSON.parse(error.request.responseText).message,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    let _this$state = this.state,\n        playlist = _this$state.playlist,\n        selectedSong = _this$state.selectedSong,\n        editPlaylistModalOpen = _this$state.editPlaylistModalOpen,\n        errorStatus = _this$state.errorStatus,\n        errorMessage = _this$state.errorMessage;\n\n    if (errorStatus) {\n      return React.createElement(ErrorView, {\n        status: errorStatus,\n        errorMessage: errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    }\n\n    if (!playlist) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Row, {\n      id: \"playlist-details-page\",\n      className: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"p-3\",\n      id: \"playlist-details-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"ml-12 p-3\",\n      id: \"playlist-details-playlist-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, playlist.title), React.createElement(\"div\", {\n      className: \"w-100 ml-12 p-3 \",\n      id: \"playlist-details-album-artwork\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image-border\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, playlist.images[0] && React.createElement(Image, {\n      src: playlist.images[0].url,\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"ml-12 p-3\",\n      id: \"playlist-details-header-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, playlist.description ? playlist.description : 'No description provided...'), React.createElement(\"div\", {\n      className: \"ml-xl-12 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/user/\".concat(playlist.ownerSpotifyId),\n      className: \"text-white d-flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa fa-user m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, playlist.author))), React.createElement(\"div\", {\n      className: \"ml-xl-12 p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      className: \"text-white\",\n      href: playlist.spotifyUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-2x fa-spotify m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      className: \"p-3\",\n      id: \"playlist-details-metadata\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \" Playlist Statistics: \"), React.createElement(\"div\", {\n      className: \"custom-card p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(PlaylistStatistics, {\n      playlistId: window.location.hash.split('/')[4],\n      userId: window.location.hash.split('/')[2],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"p-3\",\n      id: \"playlist-details-metadata\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"song-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"m-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" Track List: \"), React.createElement(\"p\", {\n      className: \"mt-3 mr-2 ml-2 mb-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, playlist.tracks.length, \" tracks\")), React.createElement(\"div\", {\n      className: \"custom-card p-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(SongTable, {\n      tracks: playlist.tracks,\n      handleSongSelection: this.handleSelectTrack,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))), React.createElement(AddToPlaylistModal, {\n      isOpen: editPlaylistModalOpen,\n      song: selectedSong,\n      onClose: this.handleCloseEditPlaylistModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PlaylistDetails;","map":{"version":3,"sources":["/Users/shashwatsingh/Desktop/work/apollos-playlist/react-web-client/src/modules/playlist-details/PlaylistDetails.jsx"],"names":["React","Component","Row","Col","Image","autoBind","getDetailedPlaylistData","SongTable","Loading","Link","PlaylistStatistics","AddToPlaylistModal","deepCamelCaseKeys","ErrorView","PlaylistDetails","constructor","props","state","playlist","selectedSong","editPlaylistModalOpen","errorStatus","errorMessage","handleSelectTrack","index","setState","tracks","handleCloseEditPlaylistModal","componentDidMount","splitURL","window","location","hash","split","userId","playlistId","then","response","data","loading","catch","error","request","status","JSON","parse","responseText","message","render","title","images","url","description","ownerSpotifyId","author","spotifyUrl","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Image } from 'react-bootstrap';\nimport autoBind from 'react-autobind';\nimport { getDetailedPlaylistData } from '../../common/apiUtils';\nimport SongTable from './subcomponents/SongTable';\nimport Loading from '../../common/components/Loading';\nimport { Link } from 'react-router-dom';\nimport PlaylistStatistics from './subcomponents/PlaylistStatistics';\nimport AddToPlaylistModal from '../add-to-playlist-modal/AddToPlaylistModal';\nimport { deepCamelCaseKeys } from '../../common/constants';\nimport ErrorView from '../../common/components/ErrorView';\n\nclass PlaylistDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playlist: null,\n      selectedSong: null,\n      editPlaylistModalOpen: false,\n      errorStatus: null,\n      errorMessage: null,\n    };\n\n    autoBind(this);\n  }\n\n  handleSelectTrack(index) {\n    return () => {\n      this.setState({\n        selectedSong: this.state.playlist.tracks[index],\n        editPlaylistModalOpen: true,\n      });\n    };\n  }\n\n  handleCloseEditPlaylistModal() {\n    this.setState({ editPlaylistModalOpen: false });\n  }\n\n  componentDidMount() {\n    let splitURL = window.location.hash.split('/');\n    let userId = splitURL[2];\n    let playlistId = splitURL[4];\n\n    // Get the detailes playlist data.\n    getDetailedPlaylistData(playlistId, userId)\n      .then(response => {\n        this.setState({\n          playlist: deepCamelCaseKeys(response.data),\n          loading: false,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          errorStatus: error.request.status,\n          errorMessage: JSON.parse(error.request.responseText).message,\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    let { playlist, selectedSong, editPlaylistModalOpen, errorStatus, errorMessage } = this.state;\n\n    if (errorStatus) {\n      return <ErrorView status={errorStatus} errorMessage={errorMessage} />;\n    }\n\n    if (!playlist) {\n      return <Loading />;\n    }\n\n    return (\n      <Row id=\"playlist-details-page\" className=\"text-white\">\n        <Col xs={12}>\n          <div className=\"p-3\" id=\"playlist-details-header\">\n            <h4 className=\"ml-12 p-3\" id=\"playlist-details-playlist-title\">{playlist.title}</h4>\n\n            <div className=\"w-100 ml-12 p-3 \" id=\"playlist-details-album-artwork\">\n              <div className=\"image-border\">{playlist.images[0] && <Image src={playlist.images[0].url} fluid />}</div>\n            </div>\n\n            <div className=\"ml-12 p-3\" id=\"playlist-details-header-description\">\n              {playlist.description ? playlist.description : 'No description provided...'}\n            </div>\n\n            <div className=\"ml-xl-12 p-3\">\n              <Link to={`/user/${playlist.ownerSpotifyId}`} className=\"text-white d-flex\">\n                <i className=\"fa fa fa-user m-1\" />\n                <p className=\"m-0\">{playlist.author}</p>\n              </Link>\n            </div>\n            <div className=\"ml-xl-12 p-3\">\n              {/* <i className=\"fa fa-2x fa-heart m-1\" /> */}\n              <div className=\"clickable\">\n                <a className=\"text-white\" href={playlist.spotifyUrl}>\n                  <i className=\"fa fa-2x fa-spotify m-1\" />\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-3\" id=\"playlist-details-metadata\">\n            <h4 className=\"m-2\"> Playlist Statistics: </h4>\n            <div className=\"custom-card p-3\">\n              <PlaylistStatistics\n                playlistId={window.location.hash.split('/')[4]}\n                userId={window.location.hash.split('/')[2]}\n              />\n            </div>\n          </div>\n\n          <div className=\"p-3\" id=\"playlist-details-metadata\">\n            <div className=\"song-row\">\n              <h4 className=\"m-2\"> Track List: </h4>\n              <p className=\"mt-3 mr-2 ml-2 mb-0\">{playlist.tracks.length} tracks</p>\n            </div>\n\n            <div className=\"custom-card p-3\">\n              <SongTable tracks={playlist.tracks} handleSongSelection={this.handleSelectTrack} />\n            </div>\n          </div>\n        </Col>\n        <AddToPlaylistModal\n          isOpen={editPlaylistModalOpen}\n          song={selectedSong}\n          onClose={this.handleCloseEditPlaylistModal}\n        />\n      </Row>\n    );\n  }\n}\n\nexport default PlaylistDetails;\n"]},"metadata":{},"sourceType":"module"}