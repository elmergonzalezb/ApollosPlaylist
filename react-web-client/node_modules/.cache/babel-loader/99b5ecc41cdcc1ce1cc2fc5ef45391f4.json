{"ast":null,"code":"'use strict';\n\nconst mapObj = require('map-obj');\n\nconst camelCase = require('camelcase');\n\nconst QuickLru = require('quick-lru');\n\nconst has = (array, key) => array.some(x => typeof x === 'string' ? x === key : x.test(key));\n\nconst cache = new QuickLru({\n  maxSize: 100000\n}); // Reproduces behavior from `map-obj`\n\nconst isObject = value => typeof value === 'object' && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\n\nconst camelCaseConvert = (input, options) => {\n  options = {\n    deep: false,\n    pascalCase: false,\n    ...options\n  };\n  const _options = options,\n        exclude = _options.exclude,\n        pascalCase = _options.pascalCase,\n        stopPaths = _options.stopPaths,\n        deep = _options.deep;\n  const stopPathsSet = stopPaths === undefined ? new Set() : new Set(stopPaths);\n\n  const makeMapper = parentPath => (key, value) => {\n    const path = parentPath === undefined ? key : \"\".concat(parentPath, \".\").concat(key);\n\n    if (deep && isObject(value) && !stopPathsSet.has(path)) {\n      value = mapObj(value, makeMapper(path));\n    }\n\n    if (!(exclude && has(exclude, key))) {\n      if (cache.has(key)) {\n        key = cache.get(key);\n      } else {\n        const ret = camelCase(key, {\n          pascalCase\n        });\n\n        if (key.length < 100) {\n          // Prevent abuse\n          cache.set(key, ret);\n        }\n\n        key = ret;\n      }\n    }\n\n    return [key, value];\n  };\n\n  return mapObj(input, makeMapper(undefined));\n};\n\nmodule.exports = (input, options) => {\n  if (Array.isArray(input)) {\n    return Object.keys(input).map(key => camelCaseConvert(input[key], options));\n  }\n\n  return camelCaseConvert(input, options);\n};","map":null,"metadata":{},"sourceType":"script"}